using System.Runtime.InteropServices;

namespace FactorioAchievementPatcher
{
	public record Patch(string FunctionName, int Offset, byte[] Target, byte[] Replacement)
	{
		internal bool Apply(Span<byte> fnBytes)
		{
			fnBytes = fnBytes[Offset..];
			if (fnBytes.StartsWith(Replacement))
				return false;

			if (!fnBytes.StartsWith(Target))
				throw new PatchTargetMissingException($"Failed to apply patch ({FunctionName}): Target not found at Offset");

			Replacement.CopyTo(fnBytes);
			return true;
		}

		internal int Find(Span<byte> fnBytes) {
			return fnBytes.IndexOf(Target);
		}
	}

	public static class Patches
	{
		public static Patch[] Windows = [
			new Patch("AchievementGui::updateInGameLongEnoughLabel", Offset: 0x33,
				Target: [
					0x48, 0x8B, 0x80, 0x90, 0x01, 0x00, 0x00,  // mov     rax, [rax+190h]
					0x49, 0x8B, 0x90, 0x58, 0x02, 0x00, 0x00,  // mov     rdx, [r8+258h]  ; tick
					0x48, 0xD1, 0xE8,                          // shr     rax, 1
					0x48, 0x3B, 0xD0,                          // cmp     rdx, rax
				],
				Replacement: [
					0x48, 0x8B, 0x80, 0x90, 0x01, 0x00, 0x00,  // mov     rax, [rax+190h]
					0x49, 0x8B, 0x90, 0x58, 0x02, 0x00, 0x00,  // mov     rdx, [r8+258h]  ; tick
					0x48, 0x31, 0xC0,                          // xor     rax, rax
					0x48, 0x3B, 0xD0,                          // cmp     rdx, rax
				]
			),
			new Patch("Player::isOnlineLongEnoughToGetAchievements", Offset: 0,
				Target: [
					0x48, 0x8B, 0x41, 0x20,                    // mov     rax, [this+20h]
					0x48, 0x8B, 0x80, 0x90, 0x01, 0x00, 0x00,  // mov     rax, [rax+190h]
					0x48, 0xD1, 0xE8,                          // shr     rax, 1
					0x48, 0x39, 0x81, 0x58, 0x02, 0x00, 0x00,  // cmp     [this+258h], rax
				],
				Replacement: [
					0x48, 0x8B, 0x41, 0x20,                    // mov     rax, [this+20h]
					0x48, 0x8B, 0x80, 0x90, 0x01, 0x00, 0x00,  // mov     rax, [rax+190h]
					0x48, 0x31, 0xC0,                          // xor     rax, rax
					0x48, 0x39, 0x81, 0x58, 0x02, 0x00, 0x00,  // cmp     [this+258h], rax
				]
			),
		];

		public static Patch[] Linux = [
			// AchievementStats::allowed
			new Patch("_ZN16AchievementStats7allowedERK3Map9NamedBoolI21IsLocalAchievementTagEbb", Offset: 0x16C,
				Target: [
					0x48, 0x8B, 0x42, 0x20,                    // mov     rax, [rdx + 0x20]
					0x48, 0x8B, 0x80, 0x70, 0x01, 0x00, 0x00,  // mov     rax, [rax + 0x170]
					0x48, 0xD1, 0xE8,                          // shr     rax, 0x01
					0x48, 0x3B, 0x82, 0xE8, 0x02, 0x00, 0x00   // cmp     rax, [rdx + 0x2e8]
				],
				Replacement: [
					0x48, 0x8B, 0x42, 0x20,                    // mov     rax, [rdx + 0x20]
					0x48, 0x8B, 0x80, 0x70, 0x01, 0x00, 0x00,  // mov     rax, [rax + 0x170]
					0x48, 0x31, 0xC0,                          // xor     rax, rax
					0x48, 0x3B, 0x82, 0xE8, 0x02, 0x00, 0x00   // cmp     rax, [rdx + 0x2e8]
				]
			),
			// AchievementGui::refresh
			new Patch("_ZN14AchievementGui7refreshEv", Offset: 0x63E,
				Target: [
					0x48, 0x8B, 0x82, 0xF8, 0x06, 0x00, 0x00,  // mov     rax, [rdx + 0x6F8]
					0x48, 0x8B, 0x48, 0x20,                    // mov     rcx, [rax + 0x20]
					0x48, 0x8B, 0xB1, 0x70, 0x01, 0x00, 0x00,  // mov     rsi, [rcx + 0x170]
					0x48, 0x89, 0xf1,                          // mov     rcx, rsi
					0x48, 0xD1, 0xE9,                          // shr     rcx, 0x01
				],
				Replacement: [
					0x48, 0x8B, 0x82, 0xF8, 0x06, 0x00, 0x00,  // mov     rax, [rdx + 0x6F8]
					0x48, 0x8B, 0x48, 0x20,                    // mov     rcx, [rax + 0x20]
					0x48, 0x8B, 0xB1, 0x70, 0x01, 0x00, 0x00,  // mov     rsi, [rcx + 0x170]
					0x48, 0x89, 0xf1,                          // mov     rcx, rsi
					0x48, 0x31, 0xC9,                          // xor     rcx, rcx
				]
			),
		];

		public static Patch[] Mac_x86 = [
			// AchievementStats::allowed
			new Patch("__ZN16AchievementStats7allowedERK3Map9NamedBoolI21IsLocalAchievementTagEbb", Offset: 0x129,
				Target: [
					0x48, 0x8B, 0x41, 0x20,                    // mov     rax, [rdx + 0x20]
					0x48, 0x8B, 0x80, 0x80, 0x01, 0x00, 0x00,  // mov     rax, [rax + 0x180]
					0x48, 0xD1, 0xE8,                          // shr     rax, 0x01
					0x48, 0x3B, 0x81, 0x78, 0x02, 0x00, 0x00,  // cmp     rax, [rdx + 0x278]
				],
				Replacement: [
					0x48, 0x8B, 0x42, 0x20,                    // mov     rax, [rdx + 0x20]
					0x48, 0x8B, 0x80, 0x80, 0x01, 0x00, 0x00,  // mov     rax, [rax + 0x180]
					0x48, 0x31, 0xC0,                          // xor     rax, rax
					0x48, 0x3B, 0x81, 0x78, 0x02, 0x00, 0x00,  // cmp     rax, [rdx + 0x278]
				]
			),
			// AchievementGui::updateInGameLongEnoughLabel
			new Patch("__ZN14AchievementGui27updateInGameLongEnoughLabelEv", Offset: 0x1E,
				Target: [
					0x48, 0x8B, 0x87, 0xC8, 0x06, 0x00, 0x00, // mov     rax, [rdi + 0x6C8]
					0x48, 0x8B, 0x48, 0x20,                   // mov     rcx, [rax + 0x20] 
					0x48, 0x8B, 0xB1, 0x80, 0x01, 0x00, 0x00, // mov     rsi, [rcx + 0x180]
					0x48, 0x89, 0xF1,                         // mov     rcx, rsi
					0x48, 0xD1, 0xE9,                         // shr     rcx, 0x01
				],
				Replacement: [
					0x48, 0x8B, 0x87, 0xC8, 0x06, 0x00, 0x00, // mov     rax, [rdi + 0x6C8]
					0x48, 0x8B, 0x48, 0x20,                   // mov     rcx, [rax + 0x20] 
					0x48, 0x8B, 0xB1, 0x80, 0x01, 0x00, 0x00, // mov     rsi, [rcx + 0x180]
					0x48, 0x89, 0xF1,                         // mov     rcx, rsi
					0x48, 0x31, 0xc9,                         // xor     rcx, rcx
				]
			),
		];

		public static Patch[] Mac_aarch64 = [
			// AchievementStats::allowed
			new Patch("__ZN16AchievementStats7allowedERK3Map9NamedBoolI21IsLocalAchievementTagEbb", Offset: 0x128,
				Target: [
					0x09, 0x3D, 0x41, 0xF9, // ldr     x9,[x8, #0x278]
					0x08, 0x11, 0x40, 0xF9, // ldr     x8,[x8, #0x20]
					0x08, 0xB9, 0x40, 0xF9, // ldr     x8,[x8, #0x170]
					0x3F, 0x05, 0x48, 0xEB, // cmp     x9,x8, LSR #0x1
				],
				Replacement: [
					0x09, 0x3D, 0x41, 0xF9, // ldr     x9,[x8, #0x278]
					0x08, 0x11, 0x40, 0xF9, // ldr     x8,[x8, #0x20]
					0xe8, 0x03, 0x1F, 0xAA, // mov     x8,xzr
					0x3F, 0x05, 0x48, 0xEB, // cmp     x9,x8, LSR #0x1
				]
			),
			// AchievementGui::updateInGameLongEnoughLabel
			new Patch("__ZN14AchievementGui27updateInGameLongEnoughLabelEv", Offset: 0x18,
				Target: [
					0x08, 0x64, 0x43, 0xf9, // ldr     x8,[x0, #0x6c8]
					0x09, 0x3d, 0x41, 0xf9, // ldr     x9,[x8, #0x278]
					0x08, 0x11, 0x40, 0xf9, // ldr     x8,[x8, #0x20]
					0x00, 0xb9, 0x40, 0xf9, // ldr     x0,[x8, #0x170]
					0x08, 0xb4, 0x82, 0x52, // mov     w8,#0x15a0
					0xb3, 0x02, 0x08, 0x8b, // add     x19,x21,x8
					0x3f, 0x05, 0x40, 0xeb, // cmp     x9,x0, LSR #0x1
				],
				Replacement: [
					0x08, 0x64, 0x43, 0xf9, // ldr     x8,[x0, #0x6c8]
					0x09, 0x3d, 0x41, 0xf9, // ldr     x9,[x8, #0x278]
					0x08, 0x11, 0x40, 0xf9, // ldr     x8,[x8, #0x20]
					0x00, 0x00, 0x80, 0xD2, // mov     x0,#0x0
					0x08, 0xb4, 0x82, 0x52, // mov     w8,#0x15a0
					0xb3, 0x02, 0x08, 0x8b, // add     x19,x21,x8
					0x3f, 0x05, 0x40, 0xeb, // cmp     x9,x0, LSR #0x1
				]
			),
		];

		public static readonly Dictionary<OSPlatform, Dictionary<Architecture, Patch[]>> PlatformPatchSets = new() {
			[OSPlatform.Windows] = new () {
				[Architecture.X64] = Windows
			},
			[OSPlatform.Linux] = new () {
				[Architecture.X64] = Linux
			},
			[OSPlatform.OSX] = new () {
				[Architecture.X64] = Mac_x86,
				[Architecture.Arm64] = Mac_aarch64
			},
		};
	}

	class PatchTargetMissingException(string message) : Exception(message);
}
